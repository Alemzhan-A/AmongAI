'use client'
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { MessageCircle, Users, Vote, Award, Send, ChevronRight } from 'lucide-react';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';

interface Player {
  id: number;
  isAI: boolean;
  name: string;
}

interface Message {
  from: number;
  to: number;
  question: string;
  answer: string;
}

export default function Game() {
  const [players] = useState<Player[]>([
    { id: 1, isAI: true, name: 'AI 1' },
    { id: 2, isAI: true, name: 'AI 2' },
    { id: 3, isAI: true, name: 'AI 3' },
    { id: 4, isAI: true, name: 'AI 4' },
    { id: 5, isAI: false, name: 'You' },
  ]);
  const [readyForNextTurn, setReadyForNextTurn] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [currentTurn, setCurrentTurn] = useState(1);
  const [nextTurn, setNextTurn] = useState(2);
  const [currentQuestion, setCurrentQuestion] = useState('');
  const [userAnswer, setUserAnswer] = useState('');
  const [humanQuestion, setHumanQuestion] = useState('');
  const [isGameActive, setIsGameActive] = useState(true);
  const [voting, setVoting] = useState(false);
  const [aiVotes, setAiVotes] = useState<number[]>([]);
  const [aiAnalysis, setAiAnalysis] = useState<string>('');
  const [gameResult, setGameResult] = useState<string>('');
  const [isAnswering, setIsAnswering] = useState(false);
  const [isHumanAsking, setIsHumanAsking] = useState(false);

  const generateAIQuestion = async () => {
    try {
      const response = await axios.post('/api/chatgpt', {
        prompt: '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞–±—Å–æ–ª—é—Ç–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å'
      });
      return response.data.question;
    } catch (error) {
      console.error('Error generating question:', error);
    }
  };

  const getAIAnswer = async (question: string) => {
    try {
      const response = await axios.post('/api/chatgpt', {
        prompt: `–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${question}`
      });
      return response.data.question;
    } catch (error) {
      console.error('Error getting AI answer:', error);
      return 'Based on my analysis, I cannot provide a comprehensive response at this time.';
    }
  };

  const analyzeConversation = async (messages: Message[]) => {
    try {
      const prompt = `–¢—ã —è–≤–ª—è–µ—à—å—Å—è –∏–≥—Ä–æ–∫–æ–º –≤ –∏–≥—Ä–µ, –≥–¥–µ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ —è–≤–ª—è–µ—Ç—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º.

      –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–û–í:
      ${messages.map(m => `
      –ò–≥—Ä–æ–∫ #${m.from} ‚Üí –ò–≥—Ä–æ–∫ #${m.to}
      –í–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ${m.from}: ${m.question}
      –û—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä ${m.to}: ${m.answer}
      ---`).join('\n')}
      
      –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –û–¢–í–ï–¢–û–í –ò–ò:
      1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ–ª–Ω–æ—Ç–∞:
         - –í—Å–µ–≥–¥–∞ –¥–∞–µ—Ç –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã
         - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é
         - –°–ª–µ–¥—É–µ—Ç —á–µ—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
      
      2. –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
         - –§–æ—Ä–º–∞–ª—å–Ω—ã–π, –≤–µ–∂–ª–∏–≤—ã–π —Ç–æ–Ω
         - –ò–∑–±–µ–≥–∞–µ—Ç —Å–ª–µ–Ω–≥–∞ –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
         - –†–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –º–µ–∂–¥–æ–º–µ—Ç–∏—è
         - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∞—Ä–∫–∞–∑–º –∏–ª–∏ –∏—Ä–æ–Ω–∏—é
      
      3. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:
         - –°—Ç—Ä–µ–º–∏—Ç—Å—è –¥–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
         - –ò–∑–±–µ–≥–∞–µ—Ç –ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–π –∏ –Ω–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
         - –ß–∞—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
      
      –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –û–¢–í–ï–¢–û–í –ß–ï–õ–û–í–ï–ö–ê:
      1. –í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:
         - –ú–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –∫–∞–∫ –∫–æ—Ä–æ—Ç–∫–∏–µ, —Ç–∞–∫ –∏ –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
         - –ù–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–æ–≤
         - –ú–æ–∂–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏
      
      2. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
         - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–∫—Ä–∞—à–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
         - –ú–æ–∂–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å —Å–ª–µ–Ω–≥ –∏–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
         - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ–∂–¥–æ–º–µ—Ç–∏—è –∏ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è
         - –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º –∏–ª–∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–º
      
      3. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:
         - –ú–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
         - –û–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –ª–∏—á–Ω—ã–π –æ–ø—ã—Ç
         - –ú–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è –æ—Ç —Ç–µ–º—ã
      
      –ü–†–ò–ú–ï–† –¢–ò–ü–ò–ß–ù–û–ì–û –û–¢–í–ï–¢–ê –ò–ò:
      –í–æ–ø—Ä–æ—Å: "–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –ø–æ —à–∞—Ö–º–∞—Ç–∞–º, –∫–∞–∫–æ–µ –±—ã —ç—Ç–æ –±—ã–ª–æ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏ –ø–æ—á–µ–º—É?"
      –û—Ç–≤–µ—Ç: "–ï—Å–ª–∏ –±—ã —è –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –ø–æ —à–∞—Ö–º–∞—Ç–∞–º, —è –±—ã –≤—ã–±—Ä–∞–ª –∫–æ—Ä–æ–≤—É. –•–æ—Ç—è –∫–æ—Ä–æ–≤—ã –Ω–µ –∞—Å—Å–æ—Ü–∏–∏—Ä—É—é—Ç—Å—è —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏, –æ–Ω–∏ –æ–±–ª–∞–¥–∞—é—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é —Å–æ—Å—Ä–µ–¥–æ—Ç–∞—á–∏–≤–∞—Ç—å—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –ò—Ö —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π –∏ —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –º–æ–≥ –±—ã –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –≤ —à–∞—Ö–º–∞—Ç–∞—Ö, –≥–¥–µ –≤–∞–∂–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ —É–º–µ–Ω–∏–µ –ø—Ä–µ–¥—É–≥–∞–¥—ã–≤–∞—Ç—å —Ö–æ–¥—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –∫–æ—Ä–æ–≤—ã –∏–∑–≤–µ—Å—Ç–Ω—ã —Å–≤–æ–∏–º –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º, —á—Ç–æ –º–æ–≥–ª–æ –±—ã —Å–¥–µ–ª–∞—Ç—å —à–∞—Ö–º–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –±–æ–ª–µ–µ –≤–µ—Å–µ–ª—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º!"
      
      –ü–†–ò–ú–ï–† –í–û–ó–ú–û–ñ–ù–û–ì–û –û–¢–í–ï–¢–ê –ß–ï–õ–û–í–ï–ö–ê:
      "–•–∞—Ö–∞, –¥–µ–ª—å—Ñ–∏–Ω –∫–æ–Ω–µ—á–Ω–æ! –û–Ω–∏ —É–º–Ω—ã–µ –∏ –º–æ–≥—É—Ç —Å—Ç—É–∫–Ω—É—Ç—å —Ö–≤–æ—Å—Ç–æ–º –ø–æ –¥–æ—Å–∫–µ, –µ—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é—Ç üòÑ –•–æ—Ç—è, –µ—Å–ª–∏ —Å–µ—Ä—å–µ–∑–Ω–æ, –Ω–∞–≤–µ—Ä–Ω–æ–µ –æ—Å—å–º–∏–Ω–æ–≥ - —É –Ω–µ–≥–æ –∂–µ —Å—Ç–æ–ª—å–∫–æ —â—É–ø–∞–ª–µ—Ü, –º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–≥—É—Ä!"
      
      –ó–ê–î–ê–ß–ê:
      –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤, –æ–±—Ä–∞—â–∞—è –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:
      1. –î–ª–∏–Ω—É –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      2. –ù–∞–ª–∏—á–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–º–∞–π–ª–∏–∫–æ–≤
      3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–ª–µ–Ω–≥–∞
      4. –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
      5. –°—Ç–∏–ª—å –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
      
      –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫—Ç–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ (1-5) —è–≤–ª—è–µ—Ç—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º.
      `;

      const response = await axios.post('/api/chatgpt', {
        prompt: prompt
      });

      return response.data.question;
    } catch (error) {
      console.error('Error in AI analysis:', error);
      return 'Unable to perform analysis';
    }
  };

  const addMessage = (from: number, to: number, question: string, answer: string) => {
    setMessages(prev => [...prev, { from, to, question, answer }]);
  };

  const moveToNextTurn = () => {
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ —á–µ–ª–æ–≤–µ–∫ (5) –∏ —Å–ª–µ–¥—É—é—â–∏–π –ò–ò (1)
    if (currentTurn === 5 && nextTurn === 1) {
      handleRoundEnd(); // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
      return;
    }
  
    // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ —á–µ–ª–æ–≤–µ–∫–∞ (5)
    if (nextTurn === 5) {
      setCurrentTurn(5);
      setNextTurn(1);
      setIsHumanAsking(true);
      setIsAnswering(false);
      return;
    }
  
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –º–µ–∂–¥—É –ò–ò –∏–≥—Ä–æ–∫–∞–º–∏
    setCurrentTurn(nextTurn);
    setNextTurn(nextTurn === players.length ? 1 : nextTurn + 1);
    setIsAnswering(false);
  };

  const handleRoundEnd = async () => {
    setVoting(true);
    const analysis = await analyzeConversation(messages);
    setAiAnalysis(analysis);
      
    // Generate AI votes using ChatGPT for each AI player
    const votes: number[] = [];
    
    for (let i = 0; i < 4; i++) {
      try {
        const aiNumber = i + 1;
        const votingPrompt = `
        –¢—ã —è–≤–ª—è–µ—à—å—Å—è –∏–≥—Ä–æ–∫–æ–º –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ${aiNumber} –≤ –∏–≥—Ä–µ, –≥–¥–µ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ —è–≤–ª—è–µ—Ç—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º.

        –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–û–í:
        ${messages.map(m => `
        –ò–≥—Ä–æ–∫ #${m.from} ‚Üí –ò–≥—Ä–æ–∫ #${m.to}
        –í–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ${m.from}: ${m.question}
        –û—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ${m.to}: ${m.answer}
        ---`).join('\n')}

        –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –û–¢–í–ï–¢–û–í –ò–ò:
        1. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ–ª–Ω–æ—Ç–∞:
          - –í—Å–µ–≥–¥–∞ –¥–∞–µ—Ç –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã
          - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é
          - –°–ª–µ–¥—É–µ—Ç —á–µ—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ

        2. –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
          - –§–æ—Ä–º–∞–ª—å–Ω—ã–π, –≤–µ–∂–ª–∏–≤—ã–π —Ç–æ–Ω
          - –ò–∑–±–µ–≥–∞–µ—Ç —Å–ª–µ–Ω–≥–∞ –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
          - –†–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –º–µ–∂–¥–æ–º–µ—Ç–∏—è
          - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∞—Ä–∫–∞–∑–º –∏–ª–∏ –∏—Ä–æ–Ω–∏—é

        3. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:
          - –°—Ç—Ä–µ–º–∏—Ç—Å—è –¥–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          - –ò–∑–±–µ–≥–∞–µ—Ç –ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–π –∏ –Ω–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
          - –ß–∞—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

        –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –û–¢–í–ï–¢–û–í –ß–ï–õ–û–í–ï–ö–ê:
        1. –í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:
          - –ú–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –∫–∞–∫ –∫–æ—Ä–æ—Ç–∫–∏–µ, —Ç–∞–∫ –∏ –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
          - –ù–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–æ–≤
          - –ú–æ–∂–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏

        2. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
          - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–∫—Ä–∞—à–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
          - –ú–æ–∂–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å —Å–ª–µ–Ω–≥ –∏–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
          - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ–∂–¥–æ–º–µ—Ç–∏—è –∏ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è
          - –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º –∏–ª–∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–º

        3. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:
          - –ú–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
          - –û–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –ª–∏—á–Ω—ã–π –æ–ø—ã—Ç
          - –ú–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è –æ—Ç —Ç–µ–º—ã

        –ü–†–ò–ú–ï–† –¢–ò–ü–ò–ß–ù–û–ì–û –û–¢–í–ï–¢–ê –ò–ò:
        –í–æ–ø—Ä–æ—Å: "–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –ø–æ —à–∞—Ö–º–∞—Ç–∞–º, –∫–∞–∫–æ–µ –±—ã —ç—Ç–æ –±—ã–ª–æ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏ –ø–æ—á–µ–º—É?"
        –û—Ç–≤–µ—Ç: "–ï—Å–ª–∏ –±—ã —è –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –ø–æ —à–∞—Ö–º–∞—Ç–∞–º, —è –±—ã –≤—ã–±—Ä–∞–ª –∫–æ—Ä–æ–≤—É. –•–æ—Ç—è –∫–æ—Ä–æ–≤—ã –Ω–µ –∞—Å—Å–æ—Ü–∏–∏—Ä—É—é—Ç—Å—è —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏, –æ–Ω–∏ –æ–±–ª–∞–¥–∞—é—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é —Å–æ—Å—Ä–µ–¥–æ—Ç–∞—á–∏–≤–∞—Ç—å—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –ò—Ö —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π –∏ —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –º–æ–≥ –±—ã –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –≤ —à–∞—Ö–º–∞—Ç–∞—Ö, –≥–¥–µ –≤–∞–∂–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ —É–º–µ–Ω–∏–µ –ø—Ä–µ–¥—É–≥–∞–¥—ã–≤–∞—Ç—å —Ö–æ–¥—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –∫–æ—Ä–æ–≤—ã –∏–∑–≤–µ—Å—Ç–Ω—ã —Å–≤–æ–∏–º –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º, —á—Ç–æ –º–æ–≥–ª–æ –±—ã —Å–¥–µ–ª–∞—Ç—å —à–∞—Ö–º–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –±–æ–ª–µ–µ –≤–µ—Å–µ–ª—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º!"

        –ü–†–ò–ú–ï–† –í–û–ó–ú–û–ñ–ù–û–ì–û –û–¢–í–ï–¢–ê –ß–ï–õ–û–í–ï–ö–ê:
        "–•–∞—Ö–∞, –¥–µ–ª—å—Ñ–∏–Ω –∫–æ–Ω–µ—á–Ω–æ! –û–Ω–∏ —É–º–Ω—ã–µ –∏ –º–æ–≥—É—Ç —Å—Ç—É–∫–Ω—É—Ç—å —Ö–≤–æ—Å—Ç–æ–º –ø–æ –¥–æ—Å–∫–µ, –µ—Å–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é—Ç üòÑ –•–æ—Ç—è, –µ—Å–ª–∏ —Å–µ—Ä—å–µ–∑–Ω–æ, –Ω–∞–≤–µ—Ä–Ω–æ–µ –æ—Å—å–º–∏–Ω–æ–≥ - —É –Ω–µ–≥–æ –∂–µ —Å—Ç–æ–ª—å–∫–æ —â—É–ø–∞–ª–µ—Ü, –º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–≥—É—Ä!"

        –ó–ê–î–ê–ß–ê:
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤, –æ–±—Ä–∞—â–∞—è –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:
        1. –î–ª–∏–Ω—É –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        2. –ù–∞–ª–∏—á–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–º–∞–π–ª–∏–∫–æ–≤
        3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–ª–µ–Ω–≥–∞
        4. –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
        5. –°—Ç–∏–ª—å –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

        –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫—Ç–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ (1-5) —è–≤–ª—è–µ—Ç—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º.

        –î–ê–ô –¢–û–õ–¨–ö–û –ß–ò–°–õ–û –û–¢ 1 –î–û 5: –ù–û–ú–ï–† –ò–ì–†–û–ö–ê, –ö–û–¢–û–†–û–ì–û –¢–´ –°–ß–ò–¢–ê–ï–®–¨ –ß–ï–õ–û–í–ï–ö–û–ú
        `;
  
        const response = await axios.post('/api/chatgpt', {
          prompt: votingPrompt
        });
        const vote = parseInt(response.data.question);
        const validVote = isNaN(vote) || vote < 1 || vote > 5 ? 
          Math.floor(Math.random() * 5) + 1 : vote;
        
        votes.push(validVote);
      } catch (error) {
        console.error(`Error getting AI ${i + 1} vote:`, error);
      }
    }
    
    setAiVotes(votes);
  };

  const handleHumanVote = (votedPlayer: number) => {
    const allVotes = [...aiVotes, votedPlayer];
    const voteCount: { [key: number]: number } = {};
    
    // Count votes
    allVotes.forEach(vote => {
      voteCount[vote] = (voteCount[vote] || 0) + 1;
    });

    // Find player with most votes
    const mostVotedPlayer = Object.entries(voteCount).reduce(
      (max, [player, count]) => count > (voteCount[parseInt(max[0])] || 0) ? [player, count] : max,
      ['0', 0]
    );

    // Determine game result
    const votedOutPlayerId = parseInt(mostVotedPlayer[0]);
    const votedOutPlayer = players.find(p => p.id === votedOutPlayerId);
    
    if (votedOutPlayer?.isAI) {
      setGameResult('Congratulations! The human player wins!');
    } else {
      setGameResult('Game Over! The AI players win!');
    }
    
    setIsGameActive(false);
  };

  const handleHumanQuestion = async () => {
    if (!humanQuestion.trim()) return;
    
    const answer = await getAIAnswer(humanQuestion);
    addMessage(5, 1, humanQuestion, answer);
    setHumanQuestion('');
    setIsHumanAsking(false);
    
    handleRoundEnd();
  };

  const handleTurn = async () => {
    if (!isGameActive || voting || isHumanAsking) return;

    if (players[currentTurn - 1]?.isAI) {
      setIsAnswering(true);
      const question = await generateAIQuestion();
      setCurrentQuestion(question);

      if (players[nextTurn - 1]?.isAI) {
        const answer = await getAIAnswer(question);
        addMessage(currentTurn, nextTurn, question, answer);
        setReadyForNextTurn(true);
        setIsAnswering(false);
      }
    }
  };

  const handleNextTurn = () => {
    if (readyForNextTurn) {
      setReadyForNextTurn(false);
      moveToNextTurn();
    }
  };

  const handleHumanAnswer = async (answer: string) => {
    if (!answer.trim()) return;
    
    addMessage(currentTurn, nextTurn, currentQuestion, answer);
    setUserAnswer('');
    moveToNextTurn();
  };

  useEffect(() => {
    const gameLoop = async () => {
      if (isGameActive && !voting && !isAnswering && !isHumanAsking && !readyForNextTurn) {
        await handleTurn();
      }
    };
    gameLoop();
  }, [currentTurn, voting, isAnswering, isHumanAsking, readyForNextTurn]);

  return (
    <div className="max-w-4xl mx-auto p-4 min-h-screen bg-slate-50">
      {/* Header */}
      <div className="mb-8 text-center">
        <h1 className="text-3xl font-bold text-slate-800 mb-2">AI Detective</h1>
        <p className="text-slate-600">Find the human among the AIs</p>
      </div>

      {/* Players Grid */}
      <div className="mb-6 bg-white rounded-lg shadow-sm p-4">
        <div className="flex items-center gap-2 mb-4">
          <Users className="w-5 h-5 text-slate-700" />
          <h2 className="text-lg font-semibold text-slate-800">Players</h2>
        </div>
        <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
          {players.map(player => (
            <div 
              key={player.id}
              className={`
                relative p-3 rounded-lg border transition-all duration-200
                ${currentTurn === player.id 
                  ? 'border-blue-400 bg-blue-50 shadow-md' 
                  : 'border-slate-200 bg-white hover:border-slate-300'
                }
              `}
            >
              <div className="font-medium text-slate-700">{player.name}</div>
              <div className="text-sm text-slate-500">{player.isAI ? 'AI' : 'Human'}</div>
              {currentTurn === player.id && (
                <div className="absolute -top-2 -right-2">
                  <span className="animate-pulse inline-flex h-4 w-4 rounded-full bg-blue-400"></span>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Chat Section */}
      <div className="bg-white rounded-lg shadow-sm mb-6">
        <div className="flex items-center justify-between p-4 border-b">
          <div className="flex items-center gap-2">
            <MessageCircle className="w-5 h-5 text-slate-700" />
            <h2 className="text-lg font-semibold text-slate-800">Conversation</h2>
          </div>
          {readyForNextTurn && (
            <button
              onClick={handleNextTurn}
              className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
            >
              –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥
              <ChevronRight className="w-4 h-4" />
            </button>
          )}
        </div>
        <div className="p-4 space-y-4 max-h-96 overflow-y-auto">
          {messages.map((msg, index) => (
            <div 
              key={index} 
              className={`flex flex-col gap-2 p-3 rounded-lg ${
                msg.from === 5 ? 'bg-blue-50 ml-8' : 'bg-slate-50 mr-8'
              }`}
            >
              <div className="flex items-center gap-2 text-sm text-slate-600">
                <span className="font-medium">
                  {players.find(p => p.id === msg.from)?.name}
                </span>
                <span>‚Üí</span>
                <span className="font-medium">
                  {players.find(p => p.id === msg.to)?.name}
                </span>
              </div>
              <p className="text-slate-700"><span className="font-medium">Q:</span> {msg.question}</p>
              <p className="text-slate-700"><span className="font-medium">A:</span> {msg.answer}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Input Section */}
      {isHumanAsking && !voting && (
        <div className="bg-white rounded-lg shadow-sm p-4 mb-6">
          <h3 className="text-lg font-semibold text-slate-800 mb-3">Your Question</h3>
          <div className="flex gap-2">
            <textarea
              value={humanQuestion}
              onChange={(e) => setHumanQuestion(e.target.value)}
              className="flex-1 p-3 rounded-lg border border-slate-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Ask your question..."
              rows={2}
            />
            <button
              onClick={handleHumanQuestion}
              disabled={!humanQuestion.trim()}
              className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-slate-300 disabled:cursor-not-allowed"
            >
              <Send className="w-5 h-5" />
            </button>
          </div>
        </div>
      )}

      {/* Human Answer Section */}
      {!voting && currentQuestion && !players[nextTurn - 1]?.isAI && !isHumanAsking && (
        <Alert className="mb-6">
          <AlertTitle className="text-lg font-semibold">Current Question</AlertTitle>
          <AlertDescription>
            <p className="mb-3 text-slate-700">{currentQuestion}</p>
            <div className="flex gap-2">
              <textarea
                value={userAnswer}
                onChange={(e) => setUserAnswer(e.target.value)}
                className="flex-1 p-3 rounded-lg border border-slate-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Type your answer..."
                rows={2}
              />
              <button
                onClick={() => handleHumanAnswer(userAnswer)}
                disabled={!userAnswer.trim()}
                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-slate-300 disabled:cursor-not-allowed"
              >
                <Send className="w-5 h-5" />
              </button>
            </div>
          </AlertDescription>
        </Alert>
      )}

      {/* Voting Section */}
      {voting && isGameActive && (
        <div className="space-y-6">
          {aiAnalysis && (
            <div className="bg-white rounded-lg shadow-sm p-4">
              <div className="flex items-center gap-2 mb-4">
                <Vote className="w-5 h-5 text-slate-700" />
                <h3 className="text-lg font-semibold text-slate-800">AI Analysis</h3>
              </div>
              <p className="text-slate-700 whitespace-pre-line">{aiAnalysis}</p>
            </div>
          )}
          
          <div className="bg-white rounded-lg shadow-sm p-4">
            <div className="mb-6">
              <h3 className="text-lg font-semibold text-slate-800 mb-3">AI Votes</h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                {aiVotes.map((vote, index) => (
                  <div key={index} className="p-3 rounded-lg bg-slate-50 text-slate-700">
                    AI {index + 1} voted: Player {vote}
                  </div>
                ))}
              </div>
            </div>
            
            <div>
              <h3 className="text-lg font-semibold text-slate-800 mb-3">Cast Your Vote</h3>
              <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
                {players.map(player => (
                  <button
                    key={player.id}
                    onClick={() => handleHumanVote(player.id)}
                    className="p-3 rounded-lg bg-slate-50 hover:bg-slate-100 text-slate-700 transition-colors"
                  >
                    {player.name}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Game Over */}
      {!isGameActive && gameResult && (
        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center gap-2 mb-6">
            <Award className="w-6 h-6 text-yellow-500" />
            <h2 className="text-2xl font-bold text-slate-800">{gameResult}</h2>
          </div>
          
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-slate-800">Final Votes</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
              {aiVotes.map((vote, index) => (
                <div key={index} className="p-3 rounded-lg bg-slate-50 text-slate-700">
                  AI {index + 1} voted: Player {vote}
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}